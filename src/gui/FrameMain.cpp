// -*- C++ -*- generated by wxGlade 0.6.3

#include "FrameMain.h"

// begin wxGlade: ::extracode

// end wxGlade


FrameMain::FrameMain(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: FrameMain::FrameMain
    panel_top = new wxPanel(this, wxID_ANY);
    sizer_klangset_staticbox = new wxStaticBox(panel_top, -1, wxEmptyString);
    panel_grid = new wxPanel(panel_top, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER|wxSTATIC_BORDER|wxTAB_TRAVERSAL);
    frame_main_menubar = new wxMenuBar();
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(wxID_NEW, _("&New"), _("Create a new Klangset."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_OPEN, _("&Open..."), _("Open an existing Klangset."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_SAVE, _("&Save"), _("Save this Klangset."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_SAVEAS, _("Save &as..."), _("Save this Klangset as..."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(wxID_EXIT, _("E&xit"), _("Exit Klangwunder3000."), wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_1, _("&File"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(wxID_ADD, _("&Add klang"), _("Add a klang."), wxITEM_NORMAL);
    wxglade_tmp_menu_2->Append(wxID_REMOVE, _("&Remove klang"), _("Remove a klang."), wxITEM_NORMAL);
    wxglade_tmp_menu_2->Append(wxID_PROPERTIES, _("&Info on klang"), _("Information on a klang."), wxITEM_NORMAL);
    wxglade_tmp_menu_2->Append(ID_PLAYKLANG, _("&Play klang"), _("Play a single klang."), wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_2, _("&Edit"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(wxID_HELP, _("&Contents"), _("Show Klangwunder3000 Help."), wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(wxID_ABOUT, wxEmptyString, _("Show some background information."), wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_3, _("&Help"));
    SetMenuBar(frame_main_menubar);
    frame_main_statusbar = CreateStatusBar(2, 0);
    button_play = new wxBitmapButton(panel_top, wxID_ANY, (bitmapFromMem(play_png)));
    button_pause = new wxBitmapButton(panel_top, wxID_ANY, (bitmapFromMem(pause_png)));
    label_vol = new wxStaticText(panel_top, wxID_ANY, _("Volume"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    slider_vol = new wxSlider(panel_top, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS);
    button_add = new wxBitmapButton(panel_top, wxID_ADD, (bitmapFromMem(add_png)));
    button_remove = new wxBitmapButton(panel_top, wxID_REMOVE, (bitmapFromMem(remove_png)));
    button_info = new wxBitmapButton(panel_top, wxID_PROPERTIES, (bitmapFromMem(info_png)));
    button_playklang = new wxBitmapButton(panel_top, ID_PLAYKLANG, (bitmapFromMem(playklang_png)));
    label_channels = new wxStaticText(panel_top, wxID_ANY, _("Channels"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    spin_ctrl_channels = new wxSpinCtrl(panel_top, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 11);
    grid_klangs = new wxGrid(panel_grid, wxID_ANY);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(FrameMain, wxFrame)
    // begin wxGlade: FrameMain::event_table
    EVT_MENU(wxID_NEW, FrameMain::klangset_new)
    EVT_MENU(wxID_OPEN, FrameMain::klangset_open)
    EVT_MENU(wxID_SAVE, FrameMain::klangset_save)
    EVT_MENU(wxID_SAVEAS, FrameMain::klangset_saveas)
    EVT_MENU(wxID_EXIT, FrameMain::app_exit)
    EVT_MENU(wxID_ADD, FrameMain::klang_add)
    EVT_MENU(wxID_REMOVE, FrameMain::klang_remove)
    EVT_MENU(wxID_PROPERTIES, FrameMain::klang_info)
    EVT_MENU(ID_PLAYKLANG, FrameMain::klang_play)
    EVT_MENU(wxID_HELP, FrameMain::help_contents)
    EVT_MENU(wxID_ABOUT, FrameMain::help_about)
    EVT_BUTTON(wxID_ANY, FrameMain::klangset_play)
    EVT_BUTTON(wxID_ANY, FrameMain::klangset_pause)
    EVT_BUTTON(wxID_ADD, FrameMain::klang_add)
    EVT_BUTTON(wxID_REMOVE, FrameMain::klang_remove)
    EVT_BUTTON(wxID_PROPERTIES, FrameMain::klang_info)
    EVT_BUTTON(ID_PLAYKLANG, FrameMain::klang_play)
    // end wxGlade
END_EVENT_TABLE();


void FrameMain::klangset_new(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_new) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klangset_open(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_open) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klangset_save(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_save) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klangset_saveas(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_saveas) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::app_exit(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::app_exit) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klang_add(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klang_add) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klang_remove(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klang_remove) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klang_info(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klang_info) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klang_play(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klang_play) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::help_contents(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::help_contents) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::help_about(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::help_about) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klangset_play(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_play) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::klangset_pause(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::klangset_pause) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add FrameMain event handlers


void FrameMain::set_properties()
{
    // begin wxGlade: FrameMain::set_properties
    SetTitle(_("Klangwunder3000"));
    wxIcon _icon;
    _icon.CopyFromBitmap(wxICON(icon));
    SetIcon(_icon);
    int frame_main_statusbar_widths[] = { -1, 3 };
    frame_main_statusbar->SetStatusWidths(2, frame_main_statusbar_widths);
    const wxString frame_main_statusbar_fields[] = {
        _("Status"),
        _("zwei")
    };
    for(int i = 0; i < frame_main_statusbar->GetFieldsCount(); ++i) {
        frame_main_statusbar->SetStatusText(frame_main_statusbar_fields[i], i);
    }
    button_play->SetToolTip(_("Play / Stop"));
    button_play->SetBitmapDisabled((bitmapFromMem(stop_png)));
    button_play->SetSize(button_play->GetBestSize());
    button_pause->SetToolTip(_("Pause"));
    button_pause->SetSize(button_pause->GetBestSize());
    slider_vol->SetToolTip(_("Change volume"));
    button_add->SetToolTip(_("Add klang"));
    button_add->SetSize(button_add->GetBestSize());
    button_remove->SetToolTip(_("Remove klang"));
    button_remove->SetSize(button_remove->GetBestSize());
    button_info->SetToolTip(_("Information on this klang"));
    button_info->SetSize(button_info->GetBestSize());
    button_playklang->SetToolTip(_("Play this klang"));
    button_playklang->SetSize(button_playklang->GetBestSize());
    spin_ctrl_channels->SetToolTip(_("Change number of simultaneously playing channels"));
    grid_klangs->CreateGrid(0, 7);
    grid_klangs->SetRowLabelSize(0);
    grid_klangs->EnableDragRowSize(false);
    grid_klangs->EnableDragGridSize(false);
    grid_klangs->SetSelectionMode(wxGrid::wxGridSelectRows);
    grid_klangs->SetColLabelValue(0, _("Name"));
    grid_klangs->SetColLabelValue(1, _("Current Propability"));
    grid_klangs->SetColSize(1, 150);
    grid_klangs->SetColLabelValue(2, _("Initial Propability"));
    grid_klangs->SetColSize(2, 140);
    grid_klangs->SetColLabelValue(3, _("Propability Increment"));
    grid_klangs->SetColSize(3, 170);
    grid_klangs->SetColLabelValue(4, _("Propability Decrement"));
    grid_klangs->SetColSize(4, 170);
    grid_klangs->SetColLabelValue(5, _("Loop Minimum"));
    grid_klangs->SetColSize(5, 120);
    grid_klangs->SetColLabelValue(6, _("Loop Maximum"));
    grid_klangs->SetColSize(6, 120);
    panel_top->SetMinSize(wxSize(640, 480));
    // end wxGlade
}


void FrameMain::do_layout()
{
    // begin wxGlade: FrameMain::do_layout
    wxBoxSizer* sizer_top = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_main = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_klangset = new wxStaticBoxSizer(sizer_klangset_staticbox, wxHORIZONTAL);
    wxBoxSizer* sizer_klang_list = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_grid = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_channels = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_klang_buttons = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_bar = new wxBoxSizer(wxHORIZONTAL);
    sizer_bar->Add(button_play, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    sizer_bar->Add(button_pause, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    sizer_bar->Add(25, 5, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_bar->Add(label_vol, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    sizer_bar->Add(slider_vol, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    sizer_main->Add(sizer_bar, 0, wxEXPAND, 0);
    sizer_klang_buttons->Add(10, 40, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    sizer_klang_buttons->Add(button_add, 0, wxALL, 5);
    sizer_klang_buttons->Add(button_remove, 0, wxALL, 5);
    sizer_klang_buttons->Add(button_info, 0, wxALL, 5);
    sizer_klang_buttons->Add(button_playklang, 0, wxALL, 5);
    sizer_klangset->Add(sizer_klang_buttons, 0, wxRIGHT, 5);
    sizer_channels->Add(label_channels, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    sizer_channels->Add(spin_ctrl_channels, 0, wxALL, 5);
    sizer_klang_list->Add(sizer_channels, 0, wxEXPAND, 0);
    sizer_grid->Add(grid_klangs, 1, wxEXPAND, 0);
    panel_grid->SetSizer(sizer_grid);
    sizer_klang_list->Add(panel_grid, 1, wxEXPAND, 0);
    sizer_klangset->Add(sizer_klang_list, 1, wxEXPAND, 0);
    sizer_main->Add(sizer_klangset, 1, wxALL|wxEXPAND, 5);
    panel_top->SetSizer(sizer_main);
    sizer_top->Add(panel_top, 1, wxEXPAND, 0);
    SetSizer(sizer_top);
    sizer_top->Fit(this);
    Layout();
    // end wxGlade
}

